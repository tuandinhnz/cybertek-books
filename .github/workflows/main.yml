name: Build and Test

on:
  push:
    branches:
      - '**'
  pull_request:
    types:
      - opened
  workflow_dispatch:

jobs:
  BuildJob:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4.1.7
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 1
          path: ${{ github.event.repository.name }}
          
      - name: Checkout core repo
        uses: actions/checkout@v4.1.7
        with:
          repository: tuandinhnz/cybertek-core
          fetch-depth: 1
          path: cybertek-core 

      - name: Print current working directory
        run: |
          echo Current working directory is $(pwd)
          ls

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: 8.0.x
     
      - name: Build
        run: |
          cd ${{ github.event.repository.name }} 
          dotnet nuget add source "https://nuget.pkg.github.com/tuandinhnz/index.json" --username tuandinhnz --password ${{ github.token }} --store-password-in-clear-text --name github
          dotnet build --configuration Release -o bin/Release/

      - name: Upload NuGet package to GitHub
        uses: actions/upload-artifact@v4.3.4
        with:
          name: ${{ github.event.repository.name }}-artifact
          path: ${{ github.event.repository.name }}/bin/Release/
          retention-days: 7

  DockerizeBuild:
    runs-on: ubuntu-latest
    needs: BuildJob
    
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4.1.8
        with:
          path: ${{ github.event.repository.name }}
          name:  ${{ github.event.repository.name }}-artifact
          
      - name: Check artifact files
        run: |
          cd  ${{ github.event.repository.name }}
          ls -ahl
          
      - name: Build Dockerfile
        run: |
          docker login -u letuandinh -p ${{ secrets.docker_password }}
          echo "FROM 375141101201.dkr.ecr.us-west-2.amazonaws.com/$base_docker_image 
          WORKDIR /app/ 
          COPY . /app/ 
          ENTRYPOINT [\"bash\", \"-c\"] 
          CMD [\"dotnet $DLLNAME\"] 
          EXPOSE $service_port" > Dockerfile
          cat Dockerfile
          
